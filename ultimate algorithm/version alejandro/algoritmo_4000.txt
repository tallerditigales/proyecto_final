.global _start
_start:
	
			mov		r0, #0x400
			mov		r1, #0		
			mov		r2, #0xFF		
			
ciclo:
			
			str		r2, [r0,r1]
			add		r1,r1,#4
			cmp		r1,r0
			
			bne		ciclo
			

			mov		r2, #69
			str		r2, [r0]
			
			mov		r2, #76
			str		r2, [r0,#4]
			
			mov		r2, #32
			str		r2, [r0,#8]
			
			mov		r2, #67
			str		r2, [r0,#12]
			
			mov		r2, #85
			str		r2, [r0,#16]
			
			mov		r2, #65
			str		r2, [r0,#20]
			
			mov		r2, #68
			str		r2, [r0,#24]
			
			mov		r2, #69
			str		r2, [r0,#28]
			
			mov		r2, #82
			str		r2, [r0,#32]
			
			mov		r2, #78
			str		r2, [r0,#36]
			
			mov		r2, #79
			str		r2, [r0,#40]
			
			mov		r2, #32
			str		r2, [r0,#44]
			
			mov		r2, #65
			str		r2, [r0,#48]
			
			mov		r2, #77
			str		r2, [r0,#52]
			
			mov		r2, #65
			str		r2, [r0,#56]
			
			mov		r2, #82
			str		r2, [r0,#60]
			
			mov		r2, #73
			str		r2, [r0,#64]
			
			mov		r2, #76
			str		r2, [r0,#68]
			
			mov		r2, #76
			str		r2, [r0,#72]
			
			mov		r2, #79
			str		r2, [r0,#76]

			
start:
			// algorithm
			MOV		r0,#0x4000   		
			MOV		r2,#0x4000 		
			MOV		r3,#0			
			
			// read
			MOV		r4,#0x400
			MOV		r5,#0x4000
		
			// colors
			MOV		r6,#0xFF000000
			ADD		r6,r6,#0x24
			mov		r7,#0x00FF0000
			
read:
			LDR		r1,[r4]
			STR		r1,[r5]
			ADD		r4,r4,#4
			ADD		r5,r5,#4

			CMP		r1,#0xFF
			BEQ		find_cycle
			B 		read
			
find_cycle:
			LDR		r1,[r0]
			
			CMP		r1,#0xFF		
			BEQ		fin
			
			CMP		r1,#32
			BEQ		space
			
			CMP		r1,#65		
			BEQ		vowel
			CMP		r1,#69		
			BEQ		vowel
			CMP		r1,#73		
			BEQ		vowel
			CMP		r1,#79		
			BEQ		vowel
			CMP		r1,#85		
			BEQ		vowel
			CMP		r1,#97		
			BEQ		vowel
			CMP		r1,#101		
			BEQ		vowel
			CMP		r1,#105		
			BEQ		vowel
			CMP		r1,#111		
			BEQ		vowel
			CMP		r1,#117		
			BEQ		vowel

			ADD		r0,r0,#4

			B		find_cycle
			
vowel:
			ADD		r3,r3,#1
			ADD		r0,r0,#4
			CMP		r3,#3
			BEQ		set_pointer

			B		find_cycle
			
set_pointer:
			MOV		r0,r2
			
replace_cycle:
			
			LDR		r1,[r0]
			
			CMP		r1,#0xFF		
			BEQ		fin
			
			CMP		r1,#32
			BEQ		space
			
			CMP		r1,#65		
			BEQ		replace
			CMP		r1,#69		
			BEQ		replace
			CMP		r1,#73		
			BEQ		replace
			CMP		r1,#79		
			BEQ		replace
			CMP		r1,#85		
			BEQ		replace
			CMP		r1,#97		
			BEQ		replace
			CMP		r1,#101		
			BEQ		replace
			CMP		r1,#105		
			BEQ		replace
			CMP		r1,#111		
			BEQ		replace
			CMP		r1,#117		
			BEQ		replace
			
			//mov		r7,#0x00FF0000
			
			add		r1,r1,r7
			str		r1,[r0]
			ADD		r0,r0,#4
			B		replace_cycle
			
			
replace:		
			STR		r6, [r0]
			ADD		r0,r0,#4
			B		replace_cycle
			
space:		
			ADD		r0,r0,#4
			MOV		r2,r0
			MOV		r3,#0

			B		find_cycle
			
fin:	