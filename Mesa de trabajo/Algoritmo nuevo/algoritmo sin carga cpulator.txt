.global _start
_start:
	
start:
			SUB 	R0, R15, R15
			add		r1,r0,#0 
			add		r3,r0,#0
			add		r4,r0,#0
			add		r5,r0,#36	
			
			
			
			
find_cycle:
			
			LDR		r2,[r1]
			
			
			subs	r10,r2,#0xFF
			//CMP		r2,#0xFF	
			BEQ		fin
			
			subs	r10,r2,#32
			//CMP		r2,#32
			BEQ		space
			
			subs	r10,r2,#65	
			//CMP		r2,#65		
			BEQ		vowel
			
			subs	r10,r2,#69	
			//CMP		r2,#69		
			BEQ		vowel
			
			subs	r10,r2,#73	
			//CMP		r2,#73		
			BEQ		vowel
			
			subs	r10,r2,#79	
			//CMP		r2,#79		
			BEQ		vowel
			
			subs	r10,r2,#85	
			//CMP		r2,#85		
			BEQ		vowel
			
			subs	r10,r2,#97
			//CMP		r2,#97		
			BEQ		vowel
			
			subs	r10,r2,#101	
			//CMP		r2,#101		
			BEQ		vowel
			
			subs	r10,r2,#105	
			//CMP		r2,#105		
			BEQ		vowel
			
			subs	r10,r2,#111	
			//CMP		r2,#111		
			BEQ		vowel
			
			subs	r10,r2,#117	
			//CMP		r2,#117		
			BEQ		vowel
			
			
			ADD		r1,r1,#4
			
			
			B		find_cycle
			
vowel:
			
			ADD		r4,r4,#1
			
			
			ADD		r1,r1,#4
			
			subs	r10,r4,#3	
			//CMP		r4,#3
			BEQ		set_pointer
			
			
			B		find_cycle
			
			
			
			
			
set_pointer:
			add		r1,r0,r3
			//MOV		r1,r3
			
replace_cycle:
			
			LDR		r2,[r1]
			
			subs	r10,r2,#0xFF	
			//CMP		r2,#0xFF		
			BEQ		fin
			
			subs	r10,r2,#32	
			//CMP		r2,#32
			BEQ		space
			
			subs	r10,r2,#65	
			//CMP		r2,#65		
			BEQ		replace
			
			subs	r10,r2,#69	
			//CMP		r2,#69		
			BEQ		replace
			
			subs	r10,r2,#73	
			//CMP		r2,#73		
			BEQ		replace
			
			subs	r10,r2,#79	
			//CMP		r2,#79		
			BEQ		replace
			
			subs	r10,r2,#85	
			//CMP		r2,#85		
			BEQ		replace
			
			subs	r10,r2,#97	
			//CMP		r2,#97		
			BEQ		replace
			
			subs	r10,r2,#101	
			//CMP		r2,#101		
			BEQ		replace
			
			subs	r10,r2,#105	
			//CMP		r2,#105		
			BEQ		replace
			
			subs	r10,r2,#111	
			//CMP		r2,#111		
			BEQ		replace
			
			subs	r10,r2,#117	
			//CMP		r2,#117		
			BEQ		replace
			
			
			ADD		r1,r1,#4
			
			
			B		replace_cycle
			
			
replace:		
			STR		r5, [r1]
			
			
			ADD		r1,r1,#4
			
			
			B		replace_cycle
			
space:		
			ADD		r1,r1,#4
			
			
			add		r3,r0,r1
			//MOV		r3,r1
			
			add		r4,r0,#0
			//MOV		r4,#0
			
			
			B		find_cycle
			
fin:		
			add r11, r0, #1
			STR r11, [R0, #200]


			